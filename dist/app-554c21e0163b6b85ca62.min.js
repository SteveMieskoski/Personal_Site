webpackJsonp([0],[
/* 0 */,
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";




var variableStore = {};
module.exports = function (variableObject) {
    variableStore = Object.assign({}, variableStore, variableObject);
    return variableStore;
};

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var dataArray = [{
    title: "About Me", // keep color
    loc: 'aboutMe',
    name: 'aboutMe',
    icon: 'perm_identity',
    id: 0,
    color: 0xfffa8a,
    caption: 'A little bit about me and my drives.',
    template: './src/page/templates/aboutMe.html',
    col: 2,
    row: 1
}, {
    title: "Projects",
    loc: 'programming',
    name: 'programming',
    icon: 'code',
    id: 1,
    color: 0x34c497,
    caption: 'A showcase of a sort.',
    template: './src/page/templates/preparation.html',
    col: 1,
    row: 2

    /*title: "Programming Experience",
    loc: 'programming',
    name: 'programming',
    icon: 'code',
    id: 1,
    color: 0xb1ffde,
    caption: 'What I have built and know.',
    template: './src/page/templates/programming.html ',
    col: 1,
    row: 2*/
}, {
    title: "Education", // keep color
    loc: 'education',
    name: 'education',
    icon: 'school',
    id: 2,
    color: 0xd6c6b9,
    caption: 'My Education.',
    template: './src/page/templates/education.html',
    col: 1,
    row: 1
}, {
    title: "Languages", // keep color
    loc: 'languages',
    name: 'languages',
    icon: 'reply',
    id: 3,
    color: 0xb2e1ff,
    caption: 'frameworks and the like.',
    template: './src/page/templates/languages.html',
    col: 2,
    row: 2
    /*title: "Past Career", // keep color
    loc: 'pastCareer',
    name: 'priorCareer',
    icon: 'reply',
    id: 3,
    color: 0xC5CCD8,
    caption: 'The legal world from which I came.',
    template: './src/page/templates/priorCareer.html',
    col: 2,
    row: 3*/
}, {
    title: "Past Career", // keep color
    loc: 'priorCareer',
    name: 'priorCareer',
    icon: 'help_outline',
    id: 4,
    color: 0xb2e1ff,
    caption: 'The legal world from which I came.',
    template: './src/page/templates/priorCareer.html',
    col: 2,
    row: 3
}, {
    title: "Preparation",
    loc: 'preparation',
    name: 'preparation',
    icon: 'build',
    id: 5,
    color: 0xb1ffde,
    caption: 'What I have built and know.',
    template: './src/page/templates/programming.html ',
    col: 1,
    row: 3
    /*   title: "Projects",
       loc: 'preparation',
       name: 'preparation',
       icon: 'build',
       id: 5,
       color: 0x34c497,
       caption: 'A showcase of a sort.',
      // template: './src/page/templates/preparation.html',
    template: './src/page/templates/programming.html ',
       col: 1,
       row: 3*/
}];

var reverseId = {
    MainPage: 9999,
    aboutMe: 0,
    programming: 1,
    education: 2,
    pastCareer: 4,
    languages: 3,
    preparation: 5
};

function createDataObject(arrayData) {
    var holdingVariable = {};
    for (var i = 0; i < arrayData.length; i++) {
        var j = arrayData[i].id;
        holdingVariable[j] = arrayData[i];
    }
    return holdingVariable;
}

var dataObject = createDataObject(dataArray);

module.exports = { dataArray: dataArray, dataObject: dataObject, reverseId: reverseId };

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

var data = __webpack_require__(2);
var createPageContent = __webpack_require__(10);
var urlHandler = __webpack_require__(9);
var store = __webpack_require__(1);
var createNewPage = __webpack_require__(7);
var removePage = __webpack_require__(5);
var tweenAnimate = __webpack_require__(4);
var background_placer = __webpack_require__(20);

function PageCreateAndDestroy() {}

PageCreateAndDestroy.prototype = {
    constructor: PageCreateAndDestroy,

    initialPageAdd: function initialPageAdd(keepId) {
        var i;
        for (i = 0; i < store().scene.children.length; i++) {
            if (store().scene.children[i].name === Number(keepId)) {
                store().scene.remove(store().scene.children[i]);
            }
        }
        if (window.innerWidth > window.innerHeight) {
            this.AnimateAddPageObjects(store, keepId);
        } else {
            this.AnimateAddPageObjectsVertical(store, keepId);
        }
    },

    /**
     * remove objects that make up the top level animations and navigation. (i.e. Add Page with Content)
     * and add the HTML and content to fill page background
     * */
    AddPageObjects: function AddPageObjects(keepId) {

        urlHandler.checkNavState(data.dataObject, keepId);

        var rendererAttach = document.getElementById('container');

        createNewPage.ClearScene(store, keepId, function () {
            createNewPage.addPageObjects(store, keepId, rendererAttach, function () {
                createNewPage.addHtmlContent(store, keepId, createPageContent.loadHtmlFile);
            });
        });

        store().camera.position.z = 1000;

        store().renderer.setSize(window.innerWidth, window.innerHeight, true);

        store().renderer.render(store().scene, store().camera); // to c&p

        background_placer();
    },

    AnimateAddPageObjects: function AnimateAddPageObjects(store, keepId, fromResize) {

        createNewPage.ClearScene(store, keepId);

        var i,
            j,
            objectfly,
            selectFly = [],
            panelPositions = [],
            panelPositionList = [{ x: 1000, y: 0 }, { x: 1000, y: -200 }, { x: -1000, y: -600 }, {
            x: -1000,
            y: -200
        }, { x: -1000, y: 200 }, { x: -1000, y: 0 }, { x: -1000, y: 400 }, { x: -1000, y: -400 }];

        for (j = panelPositionList.length - 1; j >= 0; j--) {
            panelPositions.push(panelPositionList.splice(j, 1)[0]);
        }

        for (i = 0; i < store().objects.length; i++) {
            objectfly = new THREE.Object3D();
            if (i === Number(keepId)) {
                objectfly.position.z = 750;
                objectfly.rotation.y = Math.PI * 2;
            } else {

                objectfly.position.x = panelPositions[i].x;
                objectfly.position.y = panelPositions[i].y;
                objectfly.position.z = Math.random() - 1000;
            }
            selectFly.push(objectfly);
        }

        if (fromResize) {

            tweenAnimate.Run(store().objects, selectFly, store().scene, store().camera, store().renderer, 2000, [6, 6], keepId, false);
        } else {
            tweenAnimate.Run(store().objects, selectFly, store().scene, store().camera, store().renderer, 2000, [6, 6], keepId, true);
        }
    },

    AnimateAddPageObjectsVertical: function AnimateAddPageObjectsVertical(store, keepId, fromResize) {
        createNewPage.ClearScene(store, keepId);
        var i,
            j,
            xFly,
            objectfly,
            picked,
            selectFly = [],
            panelPositions = [],
            panelPositionList = [{ x: -1000, y: -400 }, { x: -1000, y: 0 }, { x: -1000, y: 200 }, {
            x: -1000,
            y: 400
        }, { x: 1000, y: -400 }, { x: 1000, y: 0 }, { x: 1000, y: 200 }, { x: 1000, y: 400 }, { x: 1000, y: -600 }];
        //
        for (j = panelPositionList.length - 1; j >= 0; j--) {
            picked = Math.floor(Math.random() * panelPositionList.length);
            panelPositions.push(panelPositionList.splice(picked, 1)[0]);
        }

        for (i = 0; i < store().objects.length; i++) {
            objectfly = new THREE.Object3D();
            if (i === Number(keepId)) {
                objectfly.position.z = 750;
                objectfly.rotation.y = Math.PI * 2;
            } else {
                xFly = Math.round(Math.random() * 2 - 1);
                if (Math.abs(xFly) === 0) {
                    xFly = -1;
                }
                objectfly.position.x = -290;
                objectfly.position.y = -i * 180 + 500;
                objectfly.position.z = Math.random() - 1000;
            }
            selectFly.push(objectfly);
        }

        if (fromResize) {
            tweenAnimate.Run(store().objects, selectFly, store().scene, store().camera, store().renderer, 2000, [6, 6], keepId, false);
        } else {
            tweenAnimate.Run(store().objects, selectFly, store().scene, store().camera, store().renderer, 2000, [6, 6], keepId, true);
        }
    },

    RemoveBackground: function RemoveBackground() {
        store().rendererP.render(store().sceneP, store().camera);
    },

    /**
     * return (add back) the objects that made up the top level animations and navigation. (i.e. Remove Page with Content)
     * */
    removePageRebuildMain: function removePageRebuildMain() {
        var varyTransitions = [store().targets.table, store().targets.sphere, store().targets.helix, store().targets.grid],
            transition = varyTransitions[Math.floor(Math.random()) + Math.floor(Math.random()) + Math.floor(Math.random())];

        removePage.Objects();

        urlHandler.checkNavState();

        removePage.RebuildMainPage(store);

        tweenAnimate.Run(store().objects, transition, store().scene, store().camera, store().renderer, 500, [6, 6]);
    }
};

module.exports = new PageCreateAndDestroy();

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//var $ = require("../lib/jquery.min.js");

//var store = require("../store");

function tweenAnimate() {}

tweenAnimate.prototype = {
    constructor: tweenAnimate,

    Run: function Run(objects, targets, scene, camera, renderer, duration, tweenRate, keepId, incrementStop, cb) {
        var i, counter, tweening, Render, object, target;
        var runCreateOrDestroy = __webpack_require__(3);

        counter = 0;
        TWEEN.removeAll();
        if (incrementStop) {
            runCreateOrDestroy.RemoveBackground();
        }
        for (i = 0; i < objects.length; i++) {

            object = objects[i];
            target = targets[i];

            new TWEEN.Tween(object.position).to({
                x: target.position.x,
                y: target.position.y,
                z: target.position.z
            }, duration).easing(this.tweenEasing[tweenRate[0]]).start();

            new TWEEN.Tween(object.rotation).to({
                x: target.rotation.x,
                y: target.rotation.y,
                z: target.rotation.z
            }, duration).easing(this.tweenEasing[tweenRate[1]]).start();
        }

        Render = function Render() {
            counter++;
            if (counter > 90 && incrementStop) {
                tweening.stop();
                runCreateOrDestroy.AddPageObjects(keepId);
            }
            renderer.render(scene, camera);
        };

        tweening = new TWEEN.Tween(this).to({}, duration * 2).onUpdate(Render).onComplete(function () {
            console.log('Tween Complete');
            if (cb !== undefined) {
                cb(keepId);
            }
        }).start();
    },

    tweenEasing: [TWEEN.Easing.Quadratic.Out, TWEEN.Easing.Quadratic.InOut, TWEEN.Easing.Cubic.In, TWEEN.Easing.Cubic.Out, TWEEN.Easing.Cubic.InOut, TWEEN.Easing.Quartic.In, TWEEN.Easing.Quartic.Out, TWEEN.Easing.Quartic.InOut, TWEEN.Easing.Quintic.In, TWEEN.Easing.Quintic.Out, TWEEN.Easing.Quintic.InOut, TWEEN.Easing.Sinusoidal.In, TWEEN.Easing.Sinusoidal.Out, TWEEN.Easing.Sinusoidal.InOut, TWEEN.Easing.Exponential.In, TWEEN.Easing.Exponential.Out, TWEEN.Easing.Exponential.InOut, TWEEN.Easing.Circular.In, TWEEN.Easing.Circular.Out, TWEEN.Easing.Circular.InOut, TWEEN.Easing.Elastic.In, TWEEN.Easing.Elastic.Out, TWEEN.Easing.Elastic.InOut, TWEEN.Easing.Back.In, TWEEN.Easing.Back.Out, TWEEN.Easing.Back.InOut, TWEEN.Easing.Bounce.In, TWEEN.Easing.Bounce.Out, TWEEN.Easing.Bounce.InOut, TWEEN.Easing.Quadratic.In]
};

module.exports = new tweenAnimate();

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var $ = __webpack_require__(0);

var store = __webpack_require__(1);

function removePage() {}

removePage.prototype = {
    constructor: removePage,

    Objects: function Objects() {
        var i;
        for (i = store().sceneP.children.length - 1; i >= 0; i--) {
            store().sceneP.remove(store().sceneP.children[i]);
        }

        $('span.page-title-name').removeClass('hide-element');
        $("canvas").remove();
        store().rendererP.render(store().sceneP, store().camera);
    },

    RebuildMainPage: function RebuildMainPage(store) {
        var i,
            replaceObject = Object.assign({}, store().objects);

        $('div.primary-view').removeClass('primary-view');
        $('div.navItems >  button.togglePage').remove();
        for (i = store().scene.children.length - 1; i >= 0; i--) {
            store().scene.remove(store().scene.children[i]);
        }

        for (i = 0; i < store().objects.length; i++) {
            replaceObject[i].position.x = -1800;
            replaceObject[i].position.y = Math.random() * 50 - 425;
            replaceObject[i].position.z = -3300;

            store().scene.add(replaceObject[i]);
        }
        store().camera.position.z = 1000;
    }

};

module.exports = new removePage();

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

var runCreateOrDestroy = __webpack_require__(3);
var createPageContent = __webpack_require__(10);
var setupTop = __webpack_require__(8);
var data = __webpack_require__(2);
var store = __webpack_require__(1);
var removePage = __webpack_require__(5);
var tweenAnimate = __webpack_require__(4);
var displayFrame = __webpack_require__(24);

var stack = [];
var selectedId;

/**
 *
 * Used by setup, jqueryTop,
 *
 */

function ButtonControl() {}

ButtonControl.prototype = {
    constructor: ButtonControl,

    init: function init() {
        this.bindDesignControls(store());
        this.templateButtons();
    },

    bindDesignControls: function bindDesignControls() {
        document.getElementById('table').addEventListener('click', function (event) {
            tweenAnimate.Run(store().objects, store().targets.table, store().scene, store().camera, store().renderer, 2000, [16, 16]);
        }, false);

        document.getElementById('sphere').addEventListener('click', function (event) {
            tweenAnimate.Run(store().objects, store().targets.sphere, store().scene, store().camera, store().renderer, 2000, [16, 16]);
        }, false);

        document.getElementById('helix').addEventListener('click', function (event) {
            tweenAnimate.Run(store().objects, store().targets.helix, store().scene, store().camera, store().renderer, 2000, [16, 16]);
        }, false);

        document.getElementById('grid').addEventListener('click', function (event) {
            tweenAnimate.Run(store().objects, store().targets.grid, store().scene, store().camera, store().renderer, 2000, [16, 16]);
        }, false);
    },

    bindMenuButtons: function bindMenuButtons() {

        $('button.mdl-button-mod').click(function () {
            if ($(this).attr('id').match(/\d+/)[0] < 9) {
                $("div.cd-layout__drawer").toggleClass("cd-not-visible").toggleClass("cd-is-visible");
                runCreateOrDestroy.AnimateAddPageObjects(store, $(this).attr('id').match(/\d+/)[0]);
            }
        });

        document.getElementById('nav9').addEventListener('click', function () {
            $("div.cd-layout__drawer").toggleClass("cd-not-visible").toggleClass("cd-is-visible");
        });

        // todo LOW IMPORTANCE change so that it appears even when the drawer is open before the canvas is created
        if ($("div.cd-layout__drawer").hasClass("cd-is-visible") && $('canvas').hasClass('currentPageDisplay')) {
            $('#nav10').removeClass('hide-element');
            document.getElementById('nav10').addEventListener('click', function () {
                runCreateOrDestroy.removePageRebuildMain();
                $('#nav9').addClass('hide-element');
                $("div.cd-layout__drawer").toggleClass("cd-not-visible").toggleClass("cd-is-visible");
            });
        }

        document.getElementById('nav11').addEventListener('click', function () {
            displayFrame('./src/page/templates/dataInput.html');
        });
    },

    templateButtons: function templateButtons() {

        document.addEventListener('ContentPageCreated', TemplateButtonListeners, true); // attach click listener to Return Button

        function TemplateButtonListeners() {
            var regex = new RegExp('preparation');
            var programmingRegex = new RegExp('languages');

            $('button.template-return-button').click(function () {
                runCreateOrDestroy.removePageRebuildMain();
            });

            // If preparation page template add click listener for demo-app-0 dialog
            if (regex.test(window.location.search.substring(1))) {
                $('div#demo-app-0').click(function () {
                    displayFrame('http://jhuntr.com');
                });

                $('div#demo-app-1').click(function () {
                    displayFrame('http://www.vrpassport.io');
                });

                $('div#demo-app-2').click(function () {
                    displayFrame('https://stevemieskoski.github.io/TriviaGame/');
                });

                $('div#demo-app-2_1').click(function () {
                    displayFrame('https://stevemieskoski.github.io/TriviaGame/');
                });
            }
            if (regex.test(window.location.search.substring(1))) {
                if (programmingRegex.test(window.location.search.substring(1))) {
                    $('div#circleJavascript').append('<div class="circular"></div>');
                    var JSLevel = document.querySelector('#circleJavascript');

                    JSLevel.appendChild('<div class="circular"></div>');
                }
            }
        }
    },

    contactForm: function contactForm() {

        document.addEventListener('ContactFormActive', ContactFormSubmitListen, true); // attach click listener to Return Button

        function ContactFormSubmitListen() {
            $('button.template-return-button').click(function () {
                runCreateOrDestroy.removePageRebuildMain();
            });
        }
    }

};

module.exports = new ButtonControl();

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

function CreateNewPage() {}

CreateNewPage.prototype = {
    constructor: CreateNewPage,

    ClearScene: function ClearScene(store, keepId, callback) {
        if (store().selectedList.hasOwnProperty('length')) {
            if (store().selectedList.length > 0) {
                if (store().selectedList[store().selectedList.length - 1] !== keepId) {
                    this.ClearableElementsPresent(store, keepId);
                }
            } else {
                store({ selectedList: keepId });
            }
        }
        if (typeof callback === "function") {
            callback(store, keepId);
        }
    },

    ClearableElementsPresent: function ClearableElementsPresent(store, keepId) {
        var i;

        for (i = 0; i < store().scene.children.length; i++) {
            if (store().scene.children[i].name === 'html') {
                store().scene.remove(store().scene.children[i]);
            }
        }
        for (i = store().sceneP.children.length - 1; i >= 0; i--) {
            store().sceneP.remove(store().sceneP.children[i]);
        }
        store({ selectedList: keepId });
    },

    addPageObjects: function addPageObjects(store, keepId, Attach, callback) {
        var i;

        for (i = 0; i < store().scene.children.length; i++) {
            if (store().scene.children[i].name === Number(keepId)) {
                store().scene.remove(store().scene.children[i]);
            }
        }

        $('span.page-title-name').addClass('hide-element');
        for (i = 0; i < store().pagePlane[keepId].children.length; i++) {
            store().sceneP.add(store().pagePlane[keepId].children[i].clone(true));
        }

        store().sceneP.add(store().lightD.clone(true));
        store().rendererP.render(store().sceneP, store().camera);
        store().rendererP.domElement.className = 'currentPageDisplay';
        Attach.appendChild(store().rendererP.domElement);
        $("canvas").addClass('currentPageDisplay');

        callback(store, keepId);
        return store();
    },

    addHtmlContent: function addHtmlContent(store, keepId, callBack) {
        var classes, templatePath;
        templatePath = store().data[keepId].template;
        if (store().portrait) {
            classes = 'page page-vertical';
        } else {
            classes = 'page page-horizontal';
        }
        callBack(templatePath, classes, store().scene, store().camera, store().renderer, store().portrait);
    },

    resetCamera: function resetCamera(position, rotation, controlCenter) {
        store().camera.position.set(position.x, position.y, position.z);
        store().camera.rotation.set(rotation.x, rotation.y, rotation.z);
        store().controls.center.set(controlCenter.x, controlCenter.y, controlCenter.z);
        store().controls.update();
        store().renderer.render();
    }

};

module.exports = new CreateNewPage();

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function SetupTop() {}

SetupTop.prototype = {
    constructor: SetupTop,

    createTopElements: function createTopElements(dataArray, scene, createPanel) {
        var i,
            element,
            object,
            objects = [];

        for (i = 0; i < dataArray.length; i++) {

            element = createPanel.create(dataArray[i]);

            object = new THREE.CSS3DObject(element);
            object.position.x = Math.random() * 4000 - 2000;
            object.position.y = Math.random() * 4000 - 2000;
            object.position.z = Math.random() * 1000 + 3000;
            object.name = dataArray[i].id;
            scene.add(object);

            objects.push(object);
        }
        return objects;
    },

    topDesign: function topDesign(dataArray, tweenObjects) {
        var targets = { table: [], sphere: [], helix: [], grid: [], column: [] };
        targets.table = tweenObjects.tableDesign(dataArray);
        targets.helix = tweenObjects.helixDesign(dataArray);
        targets.grid = tweenObjects.gridDesign(dataArray);
        targets.sphere = tweenObjects.sphereDesign(dataArray);
        targets.column = tweenObjects.columnDesign(dataArray);

        return targets;
    },

    createTopRenderer: function createTopRenderer(appendingElement) {
        var renderer = new THREE.CSS3DRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.domElement.style.position = 'absolute';
        renderer.domElement.id = 'TopRendererDomEl';
        appendingElement.appendChild(renderer.domElement);
        return renderer;
    },

    createTopControls: function createTopControls(scene, camera, renderer) {
        var controls = new THREE.OrbitControls(camera, renderer.domElement);
        controls.target = new THREE.Vector3();
        controls.minDistance = 1000;
        controls.maxDistance = 3000;
        controls.minPolarAngle = 0; // radians
        controls.maxPolarAngle = Math.PI / 2; // radians
        controls.minAzimuthAngle = -Math.PI; // radians
        controls.maxAzimuthAngle = Math.PI; // radians
        controls.enablePan = false;
        controls.addEventListener('change', function () {
            renderer.render(scene, camera);
        });
        return controls;
    },

    startTopAnimation: function startTopAnimation(objects, targets, scene, camera, renderer, controls, tweenAnimate, windowResize) {

        function start(objects, targets, scene, camera, renderer, controls, tweenAnimate, windowResize) {
            var target;
            if (window.innerWidth < window.innerHeight) {
                target = targets.column;
            } else {
                target = targets.table;
            }

            function animate() {
                requestAnimationFrame(animate);
                TWEEN.update();
                if (controls != -1) {
                    controls.update();
                }
            }

            tweenAnimate.Run(objects, target, scene, camera, renderer, 2000, [16, 16]);
            window.addEventListener('resize', windowResize, false);
            renderer.render(scene, camera);
            animate();
        }

        start(objects, targets, scene, camera, renderer, controls, tweenAnimate, windowResize);
    },

    render: function render(varStore) {
        varStore.renderer.render(varStore.scene, varStore.camera);
        return varStore;
    }
};

module.exports = new SetupTop();

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

var data = __webpack_require__(2);

function urlHandler() {}

urlHandler.prototype = {
    constructor: urlHandler,

    checkNavState: function checkNavState(data, keepId) {
        var sessionHistory, locationListArray, addNewItem, stateObj;

        sessionHistory = sessionStorage.getItem('locationList');
        locationListArray = JSON.parse(sessionHistory);

        if (keepId < 9000) {
            addNewItem = locationListArray.concat([data[Number(keepId)].loc]);
            sessionStorage.setItem('locationList', JSON.stringify(addNewItem));

            stateObj = { location: data[Number(keepId)].loc };
            history.pushState(stateObj, data[Number(keepId)].loc, '?' + data[Number(keepId)].loc);
        } else {

            addNewItem = locationListArray.concat(['MainPage']);
            sessionStorage.setItem('locationList', JSON.stringify(addNewItem));

            stateObj = { location: 'MainPage' };
            history.pushState(stateObj, 'Steve Mieskoski Profile Home', '?MainPage');
        }
    },

    checkInitUrl: function checkInitUrl(data, locationSubstring, callBack) {

        var sessionStorageInit = JSON.stringify([locationSubstring]);
        sessionStorage.setItem('locationList', sessionStorageInit);

        if (locationSubstring in data) {
            if (data[locationSubstring] < 100) {

                callBack(data[locationSubstring]);
            }
        }
    },

    handleBackForward: function handleBackForward(callBackPage, callBackMain) {
        var beginningLocation,
            data = __webpack_require__(2);

        window.addEventListener('popstate', function () {
            var sessionHistory, locationListArray, historyItem;
            sessionHistory = sessionStorage.getItem('locationList');
            locationListArray = JSON.parse(sessionHistory);

            if (locationListArray.length > 1) {
                locationListArray.pop();
                historyItem = locationListArray[locationListArray.length - 1];
                locationListArray.pop();

                if (locationListArray.length === 0) {
                    beginningLocation = true;
                } else {
                    beginningLocation = false;
                }

                sessionStorage.setItem('locationList', JSON.stringify(locationListArray));
            } else {
                historyItem = locationListArray[0];
                beginningLocation = true;
                sessionStorage.setItem('locationList', JSON.stringify(locationListArray));
            }

            if (historyItem !== 'MainPage') {
                callBackPage(data.reverseId[historyItem], beginningLocation);
            } else {
                callBackMain();
            }
        });
    }

};

module.exports = new urlHandler();

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

function createPageContent() {}

createPageContent.prototype = {
	constructor: createPageContent,

	loadHtmlFile: function loadHtmlFile(filename, classes, scene, camera, renderer, orientation) {

		if (orientation === undefined) {
			orientation = window.innerHeight > window.innerWidth;
		}
		var xmlRequest,
		    pageElement = document.createElement('div');
		pageElement.className = classes;
		xmlRequest = new XMLHttpRequest();

		xmlRequest.onreadystatechange = function () {

			if (xmlRequest.readyState === 4 && xmlRequest.status === 200) {

				$(pageElement).html(xmlRequest.responseText);

				var toggleButton = document.createElement('button');
				toggleButton.textContent = 'Return';
				toggleButton.className = 'template-return-button mdl-button-return  mdl-js-button mdl-js-ripple-effect';

				pageElement.querySelector('div.button-attach').appendChild(toggleButton);
			}

			xmlRequest.onload = function () {
				var object = new THREE.CSS3DObject(pageElement);
				object.position.x = 0;
				object.position.y = 0;
				object.position.z = 10;
				object.rotation.y = -0.2;
				object.name = 'html';
				scene.add(object);
				renderer.render(scene, camera);
			};
		};

		xmlRequest.open('GET', filename, true);
		xmlRequest.send();

		xmlRequest.addEventListener('loadend', afterLoadendSetups, false);

		function afterLoadendSetups() {
			if (orientation) {
				var landscapeMessage = document.createElement('span');
				landscapeMessage.textContent = 'To better view site rotate to landscape ';
				landscapeMessage.className = 'better-view-message';
				if (pageElement.querySelector('div.messageAttach') !== null) {
					pageElement.querySelector('div.messageAttach').appendChild(landscapeMessage);
				}
			}
			if (pageElement.querySelector('div#languagesPage')) {
				console.log("langualge page");
				buildProgrammingTable(pageElement);
			}
			var pageNavEvent = new Event("pageNav");
			pageElement.dispatchEvent(pageNavEvent);

			// dispatch event to button control to attach listeners to template buttons
			var pageCreatedEvent = new Event('ContentPageCreated');
			document.dispatchEvent(pageCreatedEvent);
		}

		var languagesTable = [[{ label: "HTML", fill: 9, bold: true }, { label: 'space' }, { label: 'JAVASCRIPT', fill: 9, bold: true }, { label: 'NodeJS', fill: 8 }, { label: 'AngularJS', fill: 8 }, { label: 'jQuery', fill: 7 }, { label: 'Aframe', fill: 5 }, { label: 'Express', fill: 7 }, { label: 'RequireJS', fill: 4 }, { label: 'Webpack', fill: 6 }, { label: "Mongoose", fill: 7 }, { label: 'Squelize', fill: 5 }, { label: "MochaJS", fill: 6 }, { label: 'ThreeJS', fill: 5 }, { label: 'Angular', fill: 5 }, { label: 'React', fill: 4 }, { label: 'Vue', fill: 5 }, { label: 'space' }], [{ label: "CSS", fill: 8, bold: true }, { label: 'space' }, { label: "JAVA", fill: 7, bold: true }, { label: "Android", fill: 6 }, { label: "Hibernate", fill: 5 }, { label: "JavaFX", fill: 6 }, { label: "space" }, { label: "PYTHON", fill: 5, bold: true }, { label: "Django", fill: 3 }, { label: "space" }], [{ label: "SQL", fill: 6, bold: true }, { label: "space" }, { label: "Databases", heading: true }, { label: "MongoDb", fill: 7 }, { label: "MySQL", fill: 6 }, { label: "space" }, { label: 'Version Control', heading: true }, { label: "GIT", fill: 7 }, { label: "space" }, { label: 'Operating Sys.', heading: true }, { label: "Linux", fill: 8 }, { label: "Windows", fill: 6 }, { label: "space" }]];

		function buildProgrammingTable(pageElement) {
			//var table = pageElement.querySelector('table#circleJavascript');
			var table = $('table#circleJavascript');
			console.log(table);
			var maxRows = 0;
			for (var j = 0; j < languagesTable.length; j++) {
				if (languagesTable[j].length > maxRows) {
					maxRows = languagesTable[j].length;
				}
			}

			for (var i = 0; i < maxRows; i++) {
				var circleItem, spaceItem, firstCol;
				var row = $("<tr>");
				for (var p = 0; p < languagesTable.length; p++) {
					if (i < languagesTable[p].length - 1) {
						if (languagesTable[p][i].label === 'space') {
							for (var ss = 0; ss < 12; ss++) {
								circleItem = $("<td>");
								circleItem.html("<div>&nbsp</div>");
								row.append(circleItem);
							}
						} else if (languagesTable[p][i].heading) {
							firstCol = $('<td style="font-weight: 600; text-align: center; ">' + languagesTable[p][i].label + '</td>');
							row.append(firstCol);
							for (var s = 0; s < 11; s++) {
								circleItem = $("<td>");
								circleItem.html("<div>&nbsp</div>");
								row.append(circleItem);
							}
						} else {
							if (languagesTable[p][i].bold) {
								firstCol = $('<td style="font-weight: 600; text-align: center;">' + languagesTable[p][i].label + '</td>');
							} else {
								firstCol = $('<td style="text-align: center;">' + languagesTable[p][i].label + '</td>');
							}
							row.append(firstCol);

							for (var n = 0; n < 10; n++) {
								circleItem = $("<td>");
								if (n < languagesTable[p][i].fill) {
									circleItem.html("<div class=\"circular greencircle\"></div>");
									row.append(circleItem);
								} else {
									circleItem.html("<div class=\"circular empty\"></div>");
									row.append(circleItem);
								}
							}
							row.append('<td><div>&nbsp</div></td>');
						}
					} else {
						for (var mnn = 0; mnn < 12; mnn++) {
							circleItem = $("<td>");
							circleItem.html("<div>&nbsp</div>");
							row.append(circleItem);
						}
					}
				}
				table.append(row);
			}
		}
	}

};

module.exports = new createPageContent();

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var data = __webpack_require__(2);

module.exports = {
    defaultPageBackground: {
        width: 3480,
        height: 2160,
        texture: 'img/background_with_transparent.png',
        //transparentColor: 0x00B894,
        transparentColor: 0x00B895,
        position: { x: 0, y: 0, z: 0 },
        names: ['mainPageBackground', 'mainPageBackground2'],
        receiveShadow: true
    },
    pageImages: ['img/mountain_sinrise_blue-gray_scale.png', 'img/mountain_sinrise_aqua_scale.png', 'img/mountain_sinrise_green_scale.png', 'img/mountain_sunrise_sand_scale.png', 'img/mountain_sunrise_two_color_purple.png', 'img/mountain_sunrise_blueForeground_scale.png', 'img/mountain_sunrise_higher_contrast.png', 'img/mountain_sunrise_normal_scale.png'],

    //todo IMPORTANT! get colors to correlate with only one panel

    createBackgroundPlane: function createBackgroundPlane() {
        var pageDesign = data.dataObject,
            PlaneObjects = [];

        for (var j = 0; j < data.dataArray.length; j++) {
            this.mesh2 = new THREE.Object3D();
            for (var i = 0; i < 2; i++) {
                var geom = new THREE.PlaneGeometry(820, 650, 1, 1);
                var material = new THREE.MeshPhongMaterial({ //using phong material broke for selections after first. changed to using this instead.
                    color: pageDesign[j].color,
                    specular: pageDesign[j].color,
                    reflectivity: 30,
                    transparent: true,
                    opacity: 0.3
                });
                var bkgndItem = new THREE.Mesh(geom, material);
                bkgndItem.position.set(0, 0, 0);
                bkgndItem.rotation.set(0, -0.2, 0);
                bkgndItem.name = pageDesign[j].name;
                this.mesh2.name = pageDesign[j].name;
                this.mesh2.add(bkgndItem);
            }
            PlaneObjects.push(this.mesh2);
        }
        return PlaneObjects;
    },
    createBackgroundSphere: function createBackgroundSphere() {
        var pageDesign = {
            '0': { color: 0x3371FF, name: 'background', image: 'img/mountain_sinrise_blue-gray_scale.png' },
            '1': { color: 0x2f576d, name: 'experience', image: 'img/mountain_sinrise_aqua_scale.png' },
            '2': { color: 0x8A8077, name: 'aboutMe', image: 'img/mountain_sinrise_green_scale.png' },
            '3': { color: 0x7EB2C0, name: 'programming', image: 'img/mountain_sunrise_sand_scale.png' },
            '4': { color: 0x1b728a, name: 'introduction', image: 'img/mountain_sunrise_two_color_purple.png' },
            '5': { color: 0x34c497, name: 'education', image: 'img/mountain_sunrise_higher_contrast.png' },
            '6': { color: 0x3b59c4, name: 'priorCareer', image: 'img/mountain_sunrise_normal_scale.png' },
            '7': { color: 0x95946F, name: 'whyProgramming', image: 'img/mountain_sunrise_two_color_purple.png' },
            '8': { color: 0x5e699c, name: 'preparation', image: 'img/mountain_sinrise_blue-gray_scale.png' }
        },
            PlaneObjects = [];

        for (var j = 0; j < 9; j++) {
            this.mesh2 = new THREE.Object3D();
            for (var i = 0; i < 2; i++) {
                //var geom = new THREE.SphereGeometry(410, 10, 10);
                var geom = new THREE.TorusKnotGeometry(200, 70);
                var material = new THREE.MeshBasicMaterial({ //using phong material broke for selections after first. changed to using this instead.
                    color: pageDesign[j].color,
                    wireframe: true,
                    wireframeLinewidth: 2,
                    reflectivity: 0.1
                });
                var grnd = new THREE.Mesh(geom, material);
                grnd.position.set(0, 0, -150);
                grnd.name = pageDesign[j].name;
                this.mesh2.name = pageDesign[j].name;
                this.mesh2.add(grnd);
            }
            PlaneObjects.push(this.mesh2);
        }
        return PlaneObjects;
    }

};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Camera() {}

Camera.prototype = {
    constructor: Camera,

    CSS: function CSS(positionObject, fieldOfView, nearPlane, farPlane, aspectRatio, cameraOptions) {
        positionObject = positionObject ? positionObject : { x: 0, y: 0, z: 1000 };
        cameraOptions = cameraOptions ? cameraOptions : undefined;
        if (!('z' in positionObject)) {
            {
                positionObject.z = 1000;
            }
        }

        fieldOfView = fieldOfView ? fieldOfView : 40;
        nearPlane = nearPlane ? nearPlane : 1;
        farPlane = farPlane ? farPlane : 10000;
        aspectRatio = aspectRatio != undefined ? aspectRatio : window.innerWidth / window.innerHeight;
        var camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);
        camera.name = 'Top-Camera';
        camera.position.x = positionObject.x;
        camera.position.y = positionObject.y;
        camera.position.z = positionObject.z;

        return camera;
    },

    WebGl: function WebGl(fieldOfView, nearPlane, farPlane, HEIGHT, WIDTH, container, centerPosition, positionObject) {
        fieldOfView = fieldOfView ? fieldOfView : 2 * Math.atan(9 / (2 * 800)) * (180 / Math.PI);
        var aspectRatio = WIDTH && HEIGHT ? WIDTH / HEIGHT : window.innerWidth / window.innerHeight;
        nearPlane = nearPlane ? nearPlane : 1;
        farPlane = farPlane ? farPlane : 10000;
        positionObject = positionObject ? positionObject : { x: 0, y: 0, z: 800 };
        centerPosition = centerPosition ? centerPosition : { x: 0, y: 0, z: 0 };
        if (!('z' in positionObject)) {
            {
                positionObject.z = 1000;
            }
        }

        var camera = new THREE.PerspectiveCamera(fieldOfView, aspectRatio, nearPlane, farPlane);
        camera.name = 'Page-Camera';
        camera.position.z = positionObject.z ? positionObject.z : 1000;
        camera.lookAt(centerPosition.x, centerPosition.y, centerPosition.z);
        camera.focus = 1; //todo figure out why this value is ten when this literal setter is not present when it should be 1
        return camera;
    }

};

module.exports = new Camera();

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Lights() {}

Lights.prototype = {
    constructor: Lights,

    defaultLightVars: {
        hemisphereLight: {
            skyColor: 0xffffff,
            groundColor: 0xffffff,
            intensity: 0.5
        },
        directionalLight: {
            color: 0xffffff,
            intensity: 0.5,
            position: { x: -4050, y: 2000, z: 3000 },
            shadow: {
                castShadow: true,
                left: -400,
                right: 400,
                top: 400,
                bottom: -400,
                near: 1,
                far: 1000,
                mapWidth: 2048,
                mapHeight: 2048
            }
        }
    },

    HemisphereLight: function HemisphereLight(pageLightValues) {
        var hemisphereLight, pageLightVars;

        pageLightVars = pageLightValues || this.defaultLightVars;

        if (pageLightVars.hasOwnProperty('hemisphereLight')) {
            hemisphereLight = pageLightVars.hemisphereLight;
        }

        return new THREE.HemisphereLight(hemisphereLight.skyColor, hemisphereLight.groundColor, hemisphereLight.intensity);
    },

    DirectionalLight: function DirectionalLight(pageLightValues) {
        var pageLightVars, directionalLight, shadowLight;

        pageLightVars = pageLightValues || this.defaultLightVars;

        if (pageLightVars.hasOwnProperty('directionalLight')) {
            directionalLight = pageLightVars.directionalLight;
        }

        shadowLight = new THREE.DirectionalLight(directionalLight.color, directionalLight.intensity);
        shadowLight.position.set(directionalLight.position.x, directionalLight.position.y, directionalLight.position.z);
        shadowLight.castShadow = directionalLight.shadow.castShadow;
        shadowLight.shadow.camera.left = directionalLight.shadow.left;
        shadowLight.shadow.camera.right = directionalLight.shadow.right;
        shadowLight.shadow.camera.top = directionalLight.shadow.top;
        shadowLight.shadow.camera.bottom = directionalLight.shadow.bottom;
        shadowLight.shadow.camera.near = directionalLight.shadow.near;
        shadowLight.shadow.camera.far = directionalLight.shadow.far;
        shadowLight.shadow.mapSize.width = directionalLight.shadow.mapWidth;
        shadowLight.shadow.mapSize.height = directionalLight.shadow.mapHeight;

        return shadowLight;
    }
};

module.exports = new Lights();

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Renderers() {}

Renderers.prototype = {
    constructor: Renderers,

    CSS: function CSS(attachTo) {
        var renderer;
        renderer = new THREE.CSS3DRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.domElement.style.position = 'absolute';
        renderer.domElement.id = 'TopRendererDomEl';
        attachTo.appendChild(renderer.domElement);
        return renderer;
    },

    WebGl: function WebGl() {
        var renderer = new THREE.WebGLRenderer({ alpha: true });
        renderer.setSize(window.innerWidth, window.innerHeight);
        renderer.domElement.style.position = 'absolute';
        renderer.domElement.id = 'WebGlRenderer';
        renderer.shadowMap.enabled = true;
        return renderer;
    }

};

module.exports = new Renderers();

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function Elements() {}

Elements.prototype = {
    constructor: Elements,

    create: function create(data) {
        var element, number, icon, symbol, details;

        element = document.createElement('div');
        element.className = 'element';
        element.id = data.id;
        element.style.backgroundColor = 'rgba(37, 81, 118,' + (Math.random() * 0.25 + 0.50) + ')';

        number = document.createElement('div');
        icon = document.createElement('i');
        icon.className = 'material-icons';
        icon.style.cssText = 'font-size: 40px; ';
        icon.textContent = data.icon;
        icon.id = 'i' + data.id;
        number.appendChild(icon);
        number.className = 'image';
        element.appendChild(number);

        symbol = document.createElement('div');
        symbol.className = 'heading';
        symbol.textContent = data.title;
        symbol.id = 'h' + data.id;
        element.appendChild(symbol);

        details = document.createElement('div');
        details.className = 'details';
        details.innerHTML = data.caption;
        details.id = 'c' + data.id;
        element.appendChild(details);

        return element;
    }
};

module.exports = new Elements();

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


//'use strict';

var $ = __webpack_require__(0);

var runCreateOrDestroy = __webpack_require__(3);
var buttonControl = __webpack_require__(6);
var print = __webpack_require__(23);
var download = __webpack_require__(22);
var contact = __webpack_require__(21);
var store = __webpack_require__(1);
var tweenAnimate = __webpack_require__(4);

module.exports = function () {

	/**
  * Handle click on Main Menu panel item
  */
	$('div.element').click(function () {
		if ($("div.cd-layout__drawer").hasClass("cd-not-visible")) {
			var selectedId = "div#" + $(this).attr('id');

			$('div.element').not(selectedId).detach();
			store({ beginningLocation: false });

			if (window.innerWidth > window.innerHeight) {
				store().scene.add(store().objects[store().selectedList[store().selectedList.length - 1]]);
				runCreateOrDestroy.AnimateAddPageObjects(store, $(this).attr('id'));
			} else {
				store().scene.add(store().objects[store().selectedList[store().selectedList.length - 1]]);
				runCreateOrDestroy.AnimateAddPageObjectsVertical(store, $(this).attr('id'));
			}
		}
	});

	/**
  * Handle print button
  */
	$('div#printButton').click(function () {
		print();
	});

	/**
  * Handle download button
  */
	$('button#downloadButton').click(function () {
		download();
	});

	/**
  * Handle View button
  */
	$('div#viewButton').click(function () {
		print();
	});

	/**
  * Handle contact button
  */
	$('div#contactButton').click(function () {
		runCreateOrDestroy.removePageRebuildMain();
		contact();
	});

	/**
  * Handle skill chart
  */
	var i,
	    jsLevel = 4;
	if ($('div#circleJavascript')) {
		for (i = 0; i < jsLevel; i++) {
			$('div#circleJavascript').append('<div class="circular"></div>');
		}
	}

	function restoreCamera(position, rotation, controlCenter) {
		store().camera.position.set(position.x, position.y, position.z);
		store().camera.rotation.set(rotation.x, rotation.y, rotation.z);
		store().controls.center.set(controlCenter.x, controlCenter.y, controlCenter.z);
		store().controls.update();
		store().renderer.render();
	}

	/**
  *  get action or response behavior with manual trigger [ignore JSlint/hint for this item]
  */
	$('button.testActionBtn').click(function () {
		$('#contactElement').fadeToggle();
	});

	/**
  * (Dev Only) Display the store object's contents
  */
	/*   $('button.StoreView').click(function () {
 	   var store = require('store');
 	   var allbuttons = document.getElementsByClassName('template-return-button');
 	   console.log('all buttons', allbuttons); // todo remove debug item
    }); */

	/**
  * Handle opening the menu drawer
  */
	// todo find a manner to handle click events in the Iframe to close the menu drawer
	$("#nav-drawer").click(function () {
		var menuDrawer = $("div.cd-layout__drawer");
		menuDrawer.toggleClass("cd-not-visible").toggleClass("cd-is-visible");
		buttonControl.bindMenuButtons();
		if (window.innerWidth < 500) {
			menuDrawer.addClass("drawer-very-small-screen").removeClass("drawer-normal-width");
		} else if (window.innerWidth < 1024) {
			menuDrawer.addClass("drawer-small-screen").removeClass("drawer-normal-width");
		} else {
			menuDrawer.addClass("drawer-normal-width").removeClass("drawer-small-screen");
		}
		document.addEventListener('click', closeMenuClick);

		function closeMenuClick(event) {
			var navWidth = Math.floor(window.innerWidth * 0.2);
			var xPosClick = event.clientX;
			if (navWidth < xPosClick && $("div.cd-layout__drawer").hasClass("cd-is-visible")) {
				$("div.cd-layout__drawer").toggleClass("cd-not-visible").toggleClass("cd-is-visible");
			}
		}
	});

	/**
  * Handle opening the drawer with buttons to manipulate the presentation of the panel elements
  */
	$("#Main-Display-Animations").click(function () {
		var drawerElement = $("div.cd-layout__drawer-display");
		drawerElement.toggleClass("cd-not-visible").toggleClass("cd-is-visible");
		if (window.innerWidth < 1024) {
			drawerElement.toggleClass("drawer-small-screen-display");
		}
		document.addEventListener('click', closeMenuClickVert);

		function closeMenuClickVert(event) {
			var navHeight = Math.floor(window.innerHeight * 0.2),
			    yPosClick = window.innerHeight - event.clientY,
			    drawerElementVert = $("div.cd-layout__drawer-display");

			if (event.clientX < window.innerWidth - 100) {
				if (navHeight < yPosClick && drawerElementVert.hasClass("cd-is-visible")) {
					drawerElementVert.toggleClass("cd-not-visible").toggleClass("cd-is-visible");
				}
			}
		}
	});

	/**
  * Handle the button animations for the Icon to open the drawer with buttons to manipulate the presentation of the main menu
  */
	$('img.displayOptionIcon').hover(function () {
		$('img.displayOptionIconLL').addClass('display-Option-Icon-Animate-LL');
		$('img.displayOptionIconLU').addClass('display-Option-Icon-Animate-LU');
		$('img.displayOptionIconRL').addClass('display-Option-Icon-Animate-RL');
		$('img.displayOptionIconRU').addClass('display-Option-Icon-Animate-RU');
		$('img.displayOptionIcon').addClass('displayOptionIconArrow');
	}, function () {
		$('img.displayOptionIconLL').removeClass('display-Option-Icon-Animate-LL');
		$('img.displayOptionIconLU').removeClass('display-Option-Icon-Animate-LU');
		$('img.displayOptionIconRL').removeClass('display-Option-Icon-Animate-RL');
		$('img.displayOptionIconRU').removeClass('display-Option-Icon-Animate-RU');
		$('img.displayOptionIcon').removeClass('displayOptionIconArrow');
	});

	$('img.displayOptionIcon').on('click', function () {});

	// };

};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function TweenObjects() {}

TweenObjects.prototype = {
    constructor: TweenObjects,
    targets: { table: [], sphere: [], helix: [], grid: [], column: [] },

    tableDesign: function tableDesign(data) {
        var i, object;

        for (i = 0; i < data.length; i++) {
            object = new THREE.Object3D();
            object.position.x = data[i].col * 220 - 380;
            object.position.y = -(data[i].row * 176) + 360;
            this.targets.table.push(object);
        }
        return this.targets.table;
    },

    sphereDesign: function sphereDesign(data) {
        var i, l, phi, theta, object, vector;

        vector = new THREE.Vector3();

        for (i = 0, l = data.length; i < l; i++) {
            phi = Math.acos(-1 + 2 * i / l);
            theta = Math.sqrt(l * Math.PI) * phi;
            object = new THREE.Object3D();
            object.position.x = 300 * Math.cos(theta) * Math.sin(phi);
            object.position.y = 300 * Math.sin(theta) * Math.sin(phi);
            object.position.z = 300 * Math.cos(phi);
            vector.copy(object.position).multiplyScalar(50);
            object.lookAt(vector);
            this.targets.sphere.push(object);
        }
        return this.targets.sphere;
    },

    helixDesign: function helixDesign(data) {
        var i, l, phi, object, vector;

        vector = new THREE.Vector3();

        for (i = 0, l = data.length; i < l; i++) {
            phi = i * 0.8 + Math.PI; // controls spacing between elements
            object = new THREE.Object3D();
            object.position.x = 450 * Math.sin(phi);
            object.position.y = -(i * 100) + 450; // use i multiple to control height along helix
            object.position.z = 450 * Math.cos(phi);
            vector.x = object.position.x * 2;
            vector.y = object.position.y;
            vector.z = object.position.z * 2;
            object.lookAt(vector);
            this.targets.helix.push(object);
        }
        return this.targets.helix;
    },

    gridDesign: function gridDesign(data) {
        var i, object;

        for (i = 0; i < data.length; i++) {
            object = new THREE.Object3D();
            object.position.x = i % 3 * 350 - 300;
            object.position.y = -(Math.floor(i / 3) % 3) * 300 + 225;
            object.position.z = Math.floor(i / 4) * -1200;
            this.targets.grid.push(object);
        }
        return this.targets.grid;
    },

    columnDesign: function columnDesign(data) {
        var i, object;

        for (i = 0; i < data.length; i++) {
            object = new THREE.Object3D();
            object.position.x = 0;
            object.position.y = i * 200 - 1000;
            object.position.z = -2000;
            this.targets.column.push(object);
        }
        return this.targets.column;
    }
};

module.exports = new TweenObjects();

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

var store = __webpack_require__(1);
var runCreateOrDestroy = __webpack_require__(3);

var onWindowResize = function onWindowResize() {
    var portrait;

    if (window.innerHeight > window.innerWidth) {
        portrait = true;
    }
    store({ portrait: portrait });
    store().cameraP.aspect = window.innerWidth / window.innerHeight;
    store().cameraP.updateProjectionMatrix();
    store().rendererP.setSize(window.innerWidth, window.innerHeight);

    if ($('canvas').hasClass('currentPageDisplay')) {
        if (window.innerHeight > window.innerWidth) {
            $('span.better-view-message').detach();

            $('div.page').addClass('page-vertical').removeClass('page-horizontal');
            $('canvas').addClass('canvasVertical');
            store().camera.aspect = window.innerHeight / window.innerWidth;
            store().renderer.setSize(window.innerHeight, window.innerWidth, true);
        } else {

            $('div.page').removeClass('page-vertical').addClass('page-horizontal');
            $('canvas').removeClass('canvasVertical');
            store().camera.aspect = window.innerWidth / window.innerHeight;
            store().renderer.setSize(window.innerWidth, window.innerHeight, true);
        }
        store().camera.position.z = 1000;
        store().camera.updateProjectionMatrix();
        store().rendererP.render(store().sceneP, store().camera);
    } else {
        store().camera.updateProjectionMatrix();
        store().rendererP.render(store().sceneP, store().camera);
    }

    if ($('canvas').hasClass('currentPageDisplay')) {
        store().camera.position.z = 1000;
    }

    store().camera.aspect = window.innerWidth / window.innerHeight;
    store().camera.updateProjectionMatrix();
    store().renderer.setSize(window.innerWidth, window.innerHeight, true);
    store().renderer.render(store().scene, store().camera);
    if (window.innerHeight > window.innerWidth) {
        runCreateOrDestroy.AnimateAddPageObjectsVertical(store, store().selectedList, true);
    } else {
        runCreateOrDestroy.AnimateAddPageObjects(store, store().selectedList, true);
    }
};

module.exports = onWindowResize;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";



var $ = __webpack_require__(0);

var data = __webpack_require__(2);
var setupTop = __webpack_require__(8);
var runCreateOrDestroy = __webpack_require__(3);
var buttonControl = __webpack_require__(6);
var jqueryTop = __webpack_require__(16);
var urlHandler = __webpack_require__(9);
var store = __webpack_require__(1);
var Cameras = __webpack_require__(12);
var tweenAnimate = __webpack_require__(4);
var windowResize = __webpack_require__(18);
var tweenObjects = __webpack_require__(17);
var createPanel = __webpack_require__(15);
var createPageObjects = __webpack_require__(11);
var renderers = __webpack_require__(14);
var lights = __webpack_require__(13);
var createNewPage = __webpack_require__(7);
var removePage = __webpack_require__(5);

var portrait;

//todo consolidate data items that are not strictly internal into a config object

function MainPageSetup(data, storeCallback) {
    var storeObjects,
        camera = Cameras.CSS(),
        scene = new THREE.Scene(),
        objects = setupTop.createTopElements(data.dataArray, scene, createPanel),
        targets = setupTop.topDesign(data.dataArray, tweenObjects),
        renderer = renderers.CSS(document.getElementById('container')),
        controls = -1,
        camToSave = {};
    if (window.location.search.substring(1) === 'do3D') {
        var ExperNotice = document.createElement('h2');
        ExperNotice.textContent = 'This is Experimental! To Reset Views (Mostly) Use Reset Button in Animate Display Menu! ';
        var attachNotice = document.querySelector('#printButton');
        attachNotice.appendChild(ExperNotice);
        controls = setupTop.createTopControls(scene, camera, renderer);
        camToSave.position = camera.position.clone();
        camToSave.rotation = camera.rotation.clone();
        camToSave.controlCenter = controls.center.clone();
    }

    setupTop.startTopAnimation(objects, targets, scene, camera, renderer, controls, tweenAnimate, windowResize);
    storeObjects = {
        camera: camera,
        scene: scene,
        objects: objects,
        targets: targets,
        renderer: renderer,
        controls: controls,
        reset: camToSave
    };
    storeCallback(storeObjects);
}

function ContentPagesSetup(storeCallback) {
    $('div#container').addClass('setupPageBase');
    var storeObjects,
        pagePlane = createPageObjects.createBackgroundPlane(),
        cameraP = Cameras.WebGl(),
        sceneP = new THREE.Scene(),
        lightH = lights.HemisphereLight(),
        lightD = lights.DirectionalLight(),
        rendererP = renderers.WebGl();
    if (window.location.search.substring(1) === 'do3D') {
        pagePlane = createPageObjects.createBackgroundSphere();
    }

    window.addEventListener('resize', windowResize, false);
    storeObjects = {
        pagePlane: pagePlane,
        cameraP: cameraP,
        lightH: lightH,
        lightD: lightD,
        sceneP: sceneP,
        rendererP: rendererP
    };
    storeCallback(storeObjects);
}

// Begin Setup
store({ data: data.dataObject });
if (window.innerHeight > window.innerWidth) {
    portrait = true;
}
store({ portrait: portrait });
store({ selectedList: [] });
store({ beginningLocation: 'index' });

$('div#container').addClass('setupPageBase');

new MainPageSetup(data, store);
new ContentPagesSetup(store);

buttonControl.init(store());
jqueryTop();

urlHandler.checkInitUrl(data.reverseId, window.location.search.substring(1), function (vars) {
    store({ selectedList: [vars] });
    runCreateOrDestroy.initialPageAdd(vars);
});

urlHandler.handleBackForward(function (varsPage, beginningLocation) {

    if (beginningLocation == true && store().beginningLocation == true) {} else {
        if (beginningLocation) {
            store().beginningLocation = true;
        }
        store().scene.add(store().objects[store().selectedList[store().selectedList.length - 1]]);
        runCreateOrDestroy.AnimateAddPageObjects(store, String(varsPage));
    }
}, function () {
    runCreateOrDestroy.removePageRebuildMain();
});

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var store = __webpack_require__(1);
var $ = __webpack_require__(0);

var finalizeBackground = function finalizeBackground() {

    if (window.innerHeight > window.innerWidth) {
        var portrait = true;
    }
    store({ portrait: portrait });
    store().cameraP.aspect = window.innerWidth / window.innerHeight;
    store().cameraP.updateProjectionMatrix();
    store().rendererP.setSize(window.innerWidth, window.innerHeight);

    if ($('canvas').hasClass('currentPageDisplay')) {
        if (window.innerHeight > window.innerWidth) {
            $('span.better-view-message').detach();

            $('div.page').addClass('page-vertical').removeClass('page-horizontal');
            $('canvas').addClass('canvasVertical');
            store().camera.aspect = window.innerHeight / window.innerWidth;
            store().renderer.setSize(window.innerHeight, window.innerWidth, true);
        } else {

            $('div.page').removeClass('page-vertical').addClass('page-horizontal');
            $('canvas').removeClass('canvasVertical');
            store().camera.aspect = window.innerWidth / window.innerHeight;
            store().renderer.setSize(window.innerWidth, window.innerHeight, true);
        }
        store().camera.position.z = 1000;
        store().camera.updateProjectionMatrix();
        store().rendererP.render(store().sceneP, store().camera);
    } else {
        store().camera.updateProjectionMatrix();
        store().rendererP.render(store().sceneP, store().camera);
    }

    if ($('canvas').hasClass('currentPageDisplay')) {
        store().camera.position.z = 1000;
    }

    store().camera.aspect = window.innerWidth / window.innerHeight;
    store().camera.updateProjectionMatrix();
    store().renderer.setSize(window.innerWidth, window.innerHeight, true);
    store().renderer.render(store().scene, store().camera);
};

module.exports = finalizeBackground;

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

var store = __webpack_require__(1);
var tweenAnimate = __webpack_require__(4);

module.exports = function () {
    var element,
        object,
        objects = [],
        target,
        toggleButton,
        xmlRequest,
        orientation,
        pageElement,
        landscapeMessage,
        pageCreatedEvent,
        targets = [];

    element = document.createElement('div');
    element.className = 'element contactElement';
    element.id = 'contactElement';
    element.style.backgroundColor = 'rgb(37, 81, 118)';

    if (window.innerHeight > window.innerWidth) {
        orientation = window.innerHeight > window.innerWidth;
    }

    pageElement = document.createElement('div');
    pageElement.className = 'ContactForm';
    xmlRequest = new XMLHttpRequest();

    xmlRequest.onreadystatechange = function () {
        if (xmlRequest.readyState === 4 && xmlRequest.status === 200) {
            $(element).html(xmlRequest.responseText);
            toggleButton = document.createElement('button');
            toggleButton.textContent = 'Close';
            toggleButton.className = 'template-return-button mdl-button-return  mdl-js-button mdl-js-ripple-effect';
            element.querySelector('div#closeContact').appendChild(toggleButton);
        }
    };

    xmlRequest.open('GET', './src/page/templates/contactForm.html', true);
    xmlRequest.send();
    xmlRequest.addEventListener('loadend', afterLoadendSetups, false);

    function afterLoadendSetups() {
        if (orientation) {
            landscapeMessage = document.createElement('span');
            landscapeMessage.textContent = 'To better view site rotate to landscape ';
            landscapeMessage.className = 'better-view-message';
            if (element.querySelector('div.messageAttach') !== null) {
                element.querySelector('div.messageAttach').appendChild(landscapeMessage);
            }
        }
        // dispatch event to button control to attach listeners to template buttons
        pageCreatedEvent = new Event('ContentPageCreated');
        document.dispatchEvent(pageCreatedEvent);
    }

    object = new THREE.CSS3DObject(element);
    object.position.x = -7000;
    object.position.y = 2975;
    object.position.z = -8000;
    store().scene.add(object);
    store().renderer.render(store().scene, store().camera);

    objects.push(object);

    target = new THREE.Object3D();
    target.position.x = 0;
    target.position.y = 0;
    target.position.z = 100;
    target.rotation.y = Math.PI * 2;
    targets.push(target);

    tweenAnimate.Run(objects, targets, store().scene, store().camera, store().renderer, 1000, [6, 6], 9999, false);
};

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

module.exports = function () {
    var xmlRequest,
        dialog = document.createElement('dialog');
    dialog.style.cssText = 'width: 95%; height: 95%; z-index: 1; overflow: visible; overflow-y: auto; ';
    dialog.id = 'infoPrintDialog';

    document.getElementById('attachOutputs').appendChild(dialog);

    xmlRequest = new XMLHttpRequest();
    xmlRequest.onreadystatechange = function () {
        if (xmlRequest.readyState === 4 && xmlRequest.status === 200) {

            $(dialog).html(xmlRequest.responseText);
            var closeButtonScript = ['<button id="closeDialog" class="noprint" style="position:absolute; left: 2%; top: 2%;">Close</button>', '<button id="PrintDocument" class="noprint"  style="position:absolute; left: 8%; top: 2%;">Print Document</button>', '<script>', 'var closeDialog = document.getElementById("closeDialog");', 'closeDialog.addEventListener("click", function() {', 'infoPrintDialog.close();', ' });', 'PrintDocument.addEventListener("click", function() {', '$("button#CloseDialog").detach();', 'window.print();', ' });', '</script>'].join('\n');

            $(dialog).append(closeButtonScript);
        }
    };

    xmlRequest.open('GET', './src/page/templates/print.html', true);
    xmlRequest.send();
    dialog.showModal();
};

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

module.exports = function () {
    "use strict";

    var dialog = document.createElement('dialog');
    dialog.style.cssText = 'width: 95%; height: 95%; padding-top: 25px; z-index: 1; overflow: visible;  overflow-y: scroll; ';
    dialog.id = 'infoPrintDialog';

    var closeButton = document.createElement('button'),
        xmlRequest = new XMLHttpRequest();

    document.getElementById('attachOutputs').appendChild(dialog);

    xmlRequest.onreadystatechange = function () {
        if (xmlRequest.readyState === 4 && xmlRequest.status === 200) {

            $(dialog).html(xmlRequest.responseText);
            var closeButtonScript = ['<button id="closeDialog" class="noprint" style="position: absolute; left: 2%; top: 0.5%;">Close</button>',
            /* '<button id="PrintDocument" class="noprint"  style="position: absolute; left: 8%; top: 2%;">Print Document</button>',*/
            '<script>', 'var closeDialog = document.getElementById("closeDialog");', 'closeDialog.addEventListener("click", function() {', 'var DialogElement = document.getElementById("infoPrintDialog");', 'infoPrintDialog.close();', 'DialogElement.remove();', ' });',
            /* 'PrintDocument.addEventListener("click", function() {',
             '$("button#CloseDialog").detach();',
             'window.print();',
             ' });',*/
            '</script>'].join('\n');

            $(dialog).append(closeButtonScript);
        }
    };

    xmlRequest.open('GET', './src/page/templates/print.html', true);
    xmlRequest.send();

    dialog.showModal();
};

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = __webpack_require__(0);

module.exports = function exampleButtonClicked(url) {
    var dialog = document.createElement('dialog');
    dialog.style.cssText = 'width: 95%; height: 95%; z-index: 1; overflow: visible;  overflow-y: scroll; ';
    dialog.id = 'exampleDialog';

    var dialogIframe = document.createElement('iframe');
    dialogIframe.src = url;
    dialogIframe.style.cssText = 'width: 95%; height: 95%; z-index: 1; overflow: visible;  overflow-y: scroll; ';
    dialogIframe.id = 'exampleIframe';

    var closeButton = document.createElement('button');

    document.getElementById('attachOutputs').appendChild(dialog);
    document.getElementById('exampleDialog').appendChild(dialogIframe);

    var closeButtonScript = ['<button id="closeDialog"  style="position:absolute; right: 2%; top: 2%;">Close</button>', '<script>', 'var closeDialog = document.getElementById("closeDialog");', 'closeDialog.addEventListener("click", function() {', 'exampleDialog.close();', ' });', '</script>'].join('\n');

    $(dialog).append(closeButtonScript);

    dialog.showModal();
};

/***/ }),
/* 25 */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(exports, {}))

/***/ }),
/* 26 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ })
],[19]);
//# sourceMappingURL=app-554c21e0163b6b85ca62.min.js.map